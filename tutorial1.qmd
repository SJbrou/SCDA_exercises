# Tutorial week 1 {.unnumbered}

Exercises can be found on [canvas](https://canvas.vu.nl/courses/77521/files/8290683?module_item_id=1420165)

Before starting the exercises, lets clear the workspace and load dependencies.

```{r setup, results='hide'}
# Clear workspace
rm(list = ls())


# This is a complex way of loading al required packages. simply calling:
# library(readxl) should suffice.

# Load dependencies
install_and_load <- function(packages) {
  installed_packages <- rownames(installed.packages())                                # Check installed packages
  to_install <- packages[!(packages %in% installed_packages)]
  if (length(to_install) > 0) {                                                       # Install missing
    install.packages(to_install, dependencies = TRUE)
  }
  suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load
}
install_and_load(c("tidyverse", "readxl", "ggplot2", "plotly"))

```

# Exercise 1

## 1.1

Visualize the time series for the entire duration

```{r exercise 1.1}
# Load the data
supermarket_data <- read_excel("data/SupermarketSales.xlsx")

# plot the timeseries
plot.ts(supermarket_data$demand)
```

## 1.2

Prepare and clean the data as necessary to ensure accuracy for analysis.\
a few notes: - there are a few missing observation dates (missing data) - there are negative values. Lets suppose they should be removed. - there are outliers, lets remove those as well

Now we end up with much missing ("NA") data. We should also curve-fit them

```{r exercise 1.2}
# lets start by converting dates to a machine-readable date format
supermarket_data <- supermarket_data %>%
  mutate(date = as.Date(as.character(date), format = "%Y%m%d"))

# Now lets create a sequence of dates with the missing dates
all_dates <- data.frame(date = seq(min(supermarket_data$date), max(supermarket_data$date), by = "day"))

# Join the two dataframes and introduce "NA" values on missing dates
data <- all_dates %>%
  left_join(supermarket_data, by = "date")

# Change any negative value to "NA"
data <- data %>%
  mutate(demand = ifelse(demand < 0, NA, demand))

plot_ly(data, x = ~date, y = ~demand, type = 'scatter', mode = 'lines') # nice interactive plot

```

## 1.3

Split the data into training and validation sets. What proportion of the data would be reasonable for each set based on the characteristics of the time series?

\*\*In class a default of 80/20 or 70/30 was discussed. As there are 4 distinct periods, the last one could be used as validation set. (however, the demand in 2021 seems particularly weak!)

ยง
