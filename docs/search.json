[
  {
    "objectID": "tutorial1.html",
    "href": "tutorial1.html",
    "title": "Tutorial week 1",
    "section": "",
    "text": "Exercise 1",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial1.html#section",
    "href": "tutorial1.html#section",
    "title": "Tutorial week 1",
    "section": "1.1",
    "text": "1.1\nVisualize the time series for the entire duration\n\n# Load the data\nsupermarket_data &lt;- read_excel(\"data/SupermarketSales.xlsx\")\n\n# plot the timeseries\nplot.ts(supermarket_data$demand)",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial1.html#section-1",
    "href": "tutorial1.html#section-1",
    "title": "Tutorial week 1",
    "section": "1.2",
    "text": "1.2\nPrepare and clean the data as necessary to ensure accuracy for analysis.\na few notes: - there are a few missing observation dates (missing data) - there are negative values. Lets suppose they should be removed. - there are outliers, lets remove those as well\nNow we end up with much missing (“NA”) data. We should also curve-fit them\n\n# lets start by converting dates to a machine-readable date format\nsupermarket_data &lt;- supermarket_data %&gt;%\n  mutate(date = as.Date(as.character(date), format = \"%Y%m%d\"))\n\n# Now lets create a sequence of dates with the missing dates\nall_dates &lt;- data.frame(date = seq(min(supermarket_data$date), max(supermarket_data$date), by = \"day\"))\n\n# Join the two dataframes and introduce \"NA\" values on missing dates\ndata &lt;- all_dates %&gt;%\n  left_join(supermarket_data, by = \"date\")\n\n# Change any negative value to \"NA\"\ndata &lt;- data %&gt;%\n  mutate(demand = ifelse(demand &lt; 0, NA, demand))\n\nplot_ly(data, x = ~date, y = ~demand, type = 'scatter', mode = 'lines') # nice interactive plot",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "tutorial1.html#section-2",
    "href": "tutorial1.html#section-2",
    "title": "Tutorial week 1",
    "section": "1.3",
    "text": "1.3\nSplit the data into training and validation sets. What proportion of the data would be reasonable for each set based on the characteristics of the time series?\n**In class a default of 80/20 or 70/30 was discussed. As there are 4 distinct periods, the last one could be used as validation set. (however, the demand in 2021 seems particularly weak!)\n§",
    "crumbs": [
      "Tutorials",
      "Tutorial 1"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Supply Chain Data Analytics",
    "section": "",
    "text": "Home\nThese are my resources for the Supply Chain Data Analytics course. I like ordering these so I can order my thoughts. Hopefully you’ll find in them as well\nThe site is hosted on github pages and written and build using Rstudio and Quarto. You can always reach out to me if you want to chat about hosting your own sites on github. I’m available.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "assignment1.html",
    "href": "assignment1.html",
    "title": "Assignment 1",
    "section": "",
    "text": "Before doing anything, lets clear the workspace and load dependencies.\n\n\nCode\n# Clear workspace\nrm(list = ls())\n\n\n# This is a complex way of loading al required packages. simply calling:\n# library(readxl) should suffice.\n\n# Load dependencies\ninstall_and_load &lt;- function(packages) {\n  installed_packages &lt;- rownames(installed.packages())                                # Check installed packages\n  to_install &lt;- packages[!(packages %in% installed_packages)]\n  if (length(to_install) &gt; 0) {                                                       # Install missing\n    install.packages(to_install, dependencies = TRUE)\n  }\n  suppressMessages(lapply(packages, require, character.only = TRUE, quietly = TRUE))  # Load\n}\ninstall_and_load(c(\"tidyverse\", \"readxl\", \"ggplot2\", \"plotly\", \"dplyr\", \"lubridate\"))\n\n\n\nDescriptive Statistics\nBefore starting the assignment, lets take a look at the data and run some descriptive statistics to decide what cleaning is required.\nLets start by plotting the total amount of orders by date\n\n\nCode\n# Load the data\nsuppressWarnings({data &lt;- read_excel(\"data/assignment1/sample_-_superstore.xls\")})\n\n# Ensure machine-readable date-time format\ndata$`Order Date` &lt;- as.Date(data$`Order Date`, format = \"%Y-%m-%d\")\n\n# Plot!\n  ggplotly(ggplot(data, aes(x = `Order Date`)) +\n    geom_histogram(binwidth = 30, fill = \"blue\", color = \"black\") +\n    labs(title = \"Total Orders by Date\", x = \"Order Date\", y = \"Frequency\") +\n    theme_minimal())\n\n\n\n\n\n\nLets also plot the frequency of 20 most sold items\n\n\nCode\n# Count frequency of top 20 products\ntop_products &lt;- data %&gt;%\n  count(`Product Name`, sort = TRUE) %&gt;%\n  top_n(20, n)\n\n# Plot!\nggplotly(ggplot(top_products, aes(x = reorder(`Product Name`, -n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Top 20 Most Sold Products\",\n       x = \"Product Name\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  coord_flip())\n\n\n\n\n\n\nAlso, lets include time-series for the top 3 sold products:\n\n\nCode\n# Find top 3 most sold product names\ntop_3_products &lt;- top_products$`Product Name`[1:3]\n\n# Filter the data for  top 3 products\ntop_3_data &lt;- data %&gt;% filter(`Product Name` %in% top_3_products)\n\n# calculate sales per month\ntop_3_data &lt;- top_3_data %&gt;%\n  mutate(Month = floor_date(`Order Date`, unit = \"month\"))\n\n# Aggregate data by month for each product\ntop_3_data_aggregated &lt;- top_3_data %&gt;%\n  group_by(Month, `Product Name`) %&gt;%\n  summarise(Sales_Count = n(), .groups = 'drop')\n\n# Plot!\nggplotly(ggplot(top_3_data_aggregated, aes(x = Month, y = Sales_Count, fill = `Product Name`)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(title = \"Monthly Sales for the Top 3 Most Sold Products\",\n       x = \"Month\",\n       y = \"Sales Count\",\n       fill = \"Product Name\") +\n  theme_minimal())\n\n\n\n\n\n\nSince there are little sales per unique product, we can also explore the descriptives of the aggregate per Sub-Category:\nLets also plot the frequency of 20 most sold items\n\n\nCode\n# Count frequency of top 20 products\ntop_categories &lt;- data %&gt;%\n  count(`Sub-Category`, sort = TRUE)\n\n# Plot!\nggplotly(ggplot(top_categories, aes(x = reorder(`Sub-Category`, -n), y = n)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Sub-Categories sorted\",\n       x = \"Product Name\",\n       y = \"Frequency\") +\n  theme_minimal() +\n  coord_flip())\n\n\n\n\n\n\nAlso, lets include time-series for the top 3 sold products:\n\n\nCode\n# Find top 3 most sold product names\ntop_3_categories &lt;- top_categories$`Sub-Category`[0:9]\n\n# Filter the data for  top 3 products\ntop_3_data &lt;- data %&gt;% filter(`Sub-Category` %in% top_3_categories)\n\n# calculate sales per month\ntop_3_data &lt;- top_3_data %&gt;%\n  mutate(Month = floor_date(`Order Date`, unit = \"month\"))\n\n# Aggregate data by month for each product\ntop_3_data_aggregated &lt;- top_3_data %&gt;%\n  group_by(Month, `Sub-Category`) %&gt;%\n  summarise(Sales_Count = n(), .groups = 'drop')\n\n# Plot!\nggplotly(ggplot(top_3_data_aggregated, aes(x = Month, y = Sales_Count, fill = `Sub-Category`)) +\n  geom_bar(stat = \"identity\", position = \"stack\") +\n  labs(title = \"Monthly Sales for the Top 3 Most Sold Products\",\n       x = \"Month\",\n       y = \"Sales Count\",\n       fill = \"Product Name\") +\n  theme_minimal())\n\n\n\n\n\n\nCode\nggplotly(\n  ggplot(top_3_data_aggregated, aes(x = Month, y = Sales_Count, color = `Sub-Category`, group = `Sub-Category`)) +\n    geom_line(size = 1) +\n    geom_point(size = 2) +  # Optional: adds points to make each data point clearer\n    labs(title = \"Monthly Sales for the Top 3 Most Sold Products\",\n         x = \"Month\",\n         y = \"Sales Count\",\n         color = \"Product Name\") +\n    theme_minimal()\n)\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.",
    "crumbs": [
      "Assignments",
      "Assignment 1"
    ]
  }
]